#!groovy

import groovy.json.JsonSlurperClassic

node("test") {


    def TEST_LEVEL='RunLocalTests'
    def PACKAGE_NAME='0Ho1U000000CaUzSAK'
    def SERVER_KEY_CREDENTALS_ID = env.SecretFile
    def CLIENT_ID = "3MVG9Gmy2zmPB01p.EXPuclCuhRe.SJE6h3JYVJ.L87ZzcfpeSht.v.E5lwn7iL1mAaccSJZO8fHvhmUtaFIc"
    def toolbelt = tool 'sfdx_toolbelt'

    // -------------------------------------------------------------------------
    // Check out code from source control.
    // -------------------------------------------------------------------------

        //checkout scm
    withEnv(["HOME=${env.WORKSPACE}"]) {

        withCredentials([file(credentialsId: "SecretFile", variable: 'server_key_file')]) {
       
            // -------------------------------------------------------------------------
            // Check out code from source control.
            // -------------------------------------------------------------------------
         
            stage('checkout source') {
                echo 'Pulling...' + env.BRANCH_NAME
                echo 'Branch name: ' + BRANCH_NAME
                checkout([
                    $class: 'GitSCM', 
                    branches: [[name: '*/master'], 
                    [name: '*/test-delta']], 
                    extensions: [], 
                    userRemoteConfigs: [[credentialsId: '2d3514e0-032d-42cc-87b2-2a29d37b3eab',
                    url: 'https://github.com/SeanCarroll1/salesforce-dreamhouse.git']]])
                //checkout scm
            }
            
            // -------------------------------------------------------------------------
            // Create Delta Package
            // -------------------------------------------------------------------------
            
            stage('Create Delta Package') {
                echo "Delta package"
                //command "git"
                rc = command "${toolbelt}/sfdx sfpowerkit:project:diff -d deltaTest2 -x -r origin/master -t origin/test-delta"
                
                if (rc != 0) {
                    error 'Error creating delta package'
                }
            }
            // -------------------------------------------------------------------------
            // Authorize the Dev Hub org with JWT key and give it an alias.
            // -------------------------------------------------------------------------
 
            stage('Authorize SitD Org') {
                echo "Authorize Sit Org"
                
                if (isUnix()) {
                    rc = command "${toolbelt}/sfdx auth:jwt:grant --instanceurl https://test.salesforce.com/ --clientid ${CLIENT_ID} --username sean_carroll@ch.honda.com.sc --jwtkeyfile ${server_key_file} --setalias HubOrg"
                } else {
                    rc = command "${toolbelt}/sfdx auth:jwt:grant --instanceurl https://test.salesforce.com/ --clientid ${CLIENT_ID} --username sean_carroll@ch.honda.com.sc --jwtkeyfile \"${server_key_file}\" --setalias HubOrg"
                }
                if (rc != 0) {
                    error 'Salesforce dev hub org authorization failed.'
                }
                
            }
            
            // -------------------------------------------------------------------------
            // Push source to test scratch org.
            // -------------------------------------------------------------------------
            stage('Push To Org') {
                rc = command "${toolbelt}/sfdx force:source:deploy -p ./deltaTest2/force-app/main/default  --targetusername sean_carroll@ch.honda.com.sc"
                if (rc != 0) {
                    error 'Salesforce push to test scratch org failed.'
                }
            }
        }
    }

    /*stage('test'){
        deleteDir()
    }*/

}

def command(script) {
    if (isUnix()) {
        return sh(returnStatus: true, script: script);
    } else {
        return bat(returnStatus: true, script: script);
    }
}
